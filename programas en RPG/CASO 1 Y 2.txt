Con base a sus conocimientos, desarrolle una solución teniendo en cuenta las siguientes indicaciones: 
- Crear en su librería un archivo de salida con los siguientes campos:
* Fecha/hora de proceso
* Número tarjeta
* Número BIN
* Nombre BIN
- Recorrer todo el archivo CANJE/CAFCNTPH, 
- Extraer del número de tarjeta (campo DCDTHJ) el código BIN (primeras 6 posiciones de la tarjeta) y buscarlo en el archivo SISTEMAS/SWFTAB08. 
- Si existe generar un registro en el archivo de salida con la información completa
- Si no existe generar un registro en el archivo de salida con el texto “BIN NO EXISTE” en el campo Nombre BIN.

Al final mostrar un resumen de la cantidad de registros encontrados y la cantidad que no encontró (comando DSPLY).

**Crear en su librería un archivo de salida con los siguientes campos:**

Fecha/hora de proceso
Número tarjeta
Número BIN
Nombre BIN

FOUTFILE   IF   E           DISK
D                 DS
D  PROCESO                  D
D  NUM_TARJETA              D
D  NUM_BIN                  D
D  NOMBRE_BIN               D

**Este código crea un archivo de salida llamado con los campos especificados. El campo representa la fecha/hora de proceso, es el número de tarjeta, es el número BIN y es el nombre BIN.FOUTFILEPROCESONUM_TARJETANUM_BINNOMBRE_BIN**

2.**Recorrer todo el archivo CANJE/CAFCNTPH y extraer el número de tarjeta (campo DCDTHJ) y buscar el código BIN (primeras 6 posiciones de la tarjeta) en el archivo SISTEMAS/SWFTAB08. Si existe, generar un registro en el archivo de salida con la información completa. Si no existe, generar un registro en el archivo de salida con el texto "BIN NO EXISTE" en el campo Nombre BIN.

C                   READ      CANJE/CAFCNTPH
C                   DOW       NOT %EOF(CANJE/CAFCNTPH)
C                   EVAL      NUM_BIN = %SUBST(NUM_TARJETA:1:6)
C                   SETLL     SISTEMAS/SWFTAB08
C                   READE     SISTEMAS/SWFTAB08
C                   IF        %EQUAL(SISTEMAS/SWFTAB08)
C                   EVAL      NOMBRE_BIN = NOMBRE
C                   ELSE
C                   MOVE      'BIN NO EXISTE' NOMBRE_BIN
C                   ENDIF
C                   WRITE     FOUTFILE
C                   READ      CANJE/CAFCNTPH
C                   ENDDO
**Este código recorre el archivo utilizando un bucle hasta que se alcanza el final del archivo. En cada iteración, se extrae el número de tarjeta y se busca en el archivo utilizando la instrucción (Set Lower Limit) seguida de (Read Equal) para buscar coincidencias exactas. Si se encuentra una coincidencia, se asigna el nombre BIN correspondiente al campo del archivo de salida. Si no se encuentra una coincidencia, se asigna el texto "BIN NO EXISTE" al campo . Luego, se escribe un registro en el archivo de salida utilizando la instrucción . Finalmente, se lee el siguiente registro en el archivo y se repite el bucle hasta que se alcanza el final del archivo.CANJE/CAFCNTPHDO WHILESISTEMAS/SWFTAB08SETLLREADENOMBRE_BINNOMBRE_BINWRITECANJE/CAFCNTPH**

3**Mostrar un resumen de la cantidad de registros encontrados y la cantidad que no se encontró utilizando el comando .DSPLY**
C                   DSPLY     'Registros encontrados: ' + %CHAR(COUNT)
C                   DSPLY     'Registros no encontrados: ' + %CHAR(COUNT_N)

**Este código muestra en la pantalla el resumen de la cantidad de registros encontrados y la cantidad que no se encontró utilizando el comando . representa la cantidad de registros encontrados y representa la cantidad de registros no encontrados.DSPLYCOUNTCOUNT_N**

**Diagrama de flujo**

Inicio -> [Crear archivo de salida con campos requeridos]
        |
        V
[Leer registro del archivo CANJE/CAFCNTPH]
        |
        V
[¿Fin del archivo CANJE/CAFCNTPH?]
   |
   V
[No] -> [Extraer número de tarjeta y buscar código BIN en archivo SISTEMAS/SWFTAB08]
   |
   V
[¿Existe en archivo SISTEMAS/SWFTAB08?]
   |
   V
[Sí] -> [Asignar nombre BIN al campo NOMBRE_BIN del archivo de salida]
   |
   V
[No] -> [Asignar texto "BIN NO EXISTE" al campo NOMBRE_BIN del archivo de salida]
   |
   V
[Guardar registro en archivo de salida]
   |
   V
[Leer siguiente registro del archivo CANJE/CAFCNTPH]
   |
   V
[¿Fin del archivo CANJE/CAFCNTPH?]
   |
   V
[Sí] -> [Mostrar resumen de registros encontrados y no encontrados]
   |
   V
[Fin del Programa]
-----------------------------------------------------------------------------------------------------------------

CASO #1:

Se necesita crear un proceso que lea todos los registros del archivo ELECTRON/CEF0500A y marque con una ‘A’ la posición 16 del campo DNADA3 cuando se cumpla con las siguientes condiciones:

-	Si el BIN de la tarjeta es 496080 o 482451, se recomienda guardar estos BINES en el archivo REFTAB00 para consultarlos posteriormente.
-	Si la transacción NO es de ALIANZA VISA. 
-	El valor total de la transacción es mayor a 2000.
-	La transacción NO esta en el archivo CEF0801L

Los registros deben ser guardados (Antes de ser modificados) en un archivo nuevo que sea idéntico al CEF0801L, solo si el registro fue modificado.

     **FREE

     // Crear archivo nuevo (CEF0801L_copia)
     CRTPF FILE(CEF0801L_C) RCDLEN(100) MBR(*NONE)

     // Declarar variables
     DCL        VAR(&BIN) TYPE(*CHAR) LEN(6)
     DCL        VAR(&TRANSACCION) TYPE(*CHAR) LEN(20)
     DCL        VAR(&VALOR) TYPE(*DEC) LEN(15 2)
     DCL        VAR(&REGISTRO) TYPE(*CHAR) LEN(100)
     DCL        VAR(&MODIFICADO) TYPE(*LGL) VALUE('0')

     // Abrir archivos
     OPNQRYF FILE((ELECTRON/CEF0500A)) QRYSLT('1=1') OUTTYPE(*OUTFILE) OUTFILE(ELECTRON/CEF0500A)

     // Leer registros
     READ: RCVF FILE(ELECTRON/CEF0500A) MONMSG(CPF0864) EXEC(GOTO EOF)

     // Verificar condiciones
     IF COND(&BIN *EQ '496080' *OR &BIN *EQ '482451') THEN(DO)
       // Guardar BIN en archivo REFTAB00
       ADDPFM FILE(REFTAB00) MBR(REFTAB00) +
         PARM(&BIN)
     END
     IF COND(&TRANSACCION *NE 'ALIANZA VISA') THEN(DO)
       IF COND(&VALOR *GT 2000) THEN(DO)
         IF COND(*NOT FOUND CEF0801L &TRANSACCION) THEN(DO)
           // Marcar posición 16 del campo DNADA3 con 'A'
           CHGVAR VAR(&REGISTRO) VALUE(%SST(&REGISTRO 1 15) || 'A' || %SUBST(&REGISTRO 17))
           CHGVAR VAR(&MODIFICADO) VALUE('1')
         ENDDO
       ENDDO
     ENDDO

     // Guardar registro modificado en archivo nuevo (CEF0801L_copia)
     IF COND(&MODIFICADO *EQ '1') THEN(DO)
       ADDPFM FILE(CEF0801L_C) MBR(CEF0801L_C) PARM(&REGISTRO)
     ENDDO

     // Volver a leer registros
     GOTO READ

     EOF:
     // Cerrar archivos
     CLOF FILE(ELECTRON/CEF0500A)
     CLOF FILE(CEF0801L_C)

****PSEUDOCODIGO****

Inicio
├─ Crear archivo nuevo (CEF0801L_copia)
├─ Leer registro (ELECTRON/CEF0500A)
│  ├─ ¿Fin de archivo? (Sí)
│  │  └─ Fin
│  └─ Verificar condiciones
│     ├─ ¿BIN es 496080 o 482451? (Sí)
│     │  ├─ Guardar BIN en archivo REFTAB00
│     │  └─ Continuar
│     ├─ ¿Transacción es de ALIANZA VISA? (No)
│     │  ├─ ¿Valor total de la transacción es mayor a 2000? (Sí)
│     │  │  ├─ ¿Transacción está en archivo CEF0801L? (No)
│     │  │  │  └─ Marcar posición 16 del campo DNADA3 con 'A'
│     │  │  └─ Continuar
│     │  └─ Continuar
│     └─ Continuar
├─ Guardar registro modificado en archivo nuevo (CEF0801L_copia)
├─ Leer siguiente registro (ELECTRON/CEF0500A)
└─ Volver a "Verificar condiciones"

Explicación línea por línea:

CRTPF FILE(CEF0801L_C) RCDLEN(100) MBR(*NONE): Crea un nuevo archivo llamado CEF0801L_C con una longitud de registro de 100 bytes y sin miembros.
DCL VAR(&BIN) TYPE(*CHAR) LEN(6): Declara la variable &BIN como un campo de caracteres de longitud 6 para almacenar el BIN de la tarjeta.
DCL VAR(&TRANSACCION) TYPE(*CHAR) LEN(20): Declara la variable &TRANSACCION como un campo de caracteres de longitud 20 para almacenar el nombre de la transacción.
DCL VAR(&VALOR) TYPE(*DEC) LEN(15 2): Declara la variable &VALOR como un campo de tipo decimal con una longitud de 15 y 2 decimales para almacenar el valor de la transacción.
DCL VAR(&REGISTRO) TYPE(*CHAR) LEN(100): Declara la variable &REGISTRO como un campo de caracteres de longitud 100 para almacenar el registro actual del archivo.
DCL VAR(&MODIFICADO) TYPE(*LGL) VALUE('0'): Declara la variable &MODIFICADO como un campo lógico con un valor inicial de '0' para indicar si el registro ha sido modificado.
OPNQRYF FILE((ELECTRON/CEF0500A)) QRYSLT('1=1') OUTTYPE(*OUTFILE) OUTFILE(ELECTRON/CEF0500A): Abre el archivo ELECTRON/CEF0500A y lo prepara para la lectura de registros.
READ: RCVF FILE(ELECTRON/CEF0500A) MONMSG(CPF0864) EXEC(GOTO EOF): Lee el siguiente registro del archivo ELECTRON/CEF0500A y, si no hay más registros, salta al punto de etiqueta EOF.
IF COND(&BIN *EQ '496080' *OR &BIN *EQ '482451') THEN(DO): Comprueba si el BIN de la tarjeta es igual a '496080' o '482451'.
ADDPFM FILE(REFTAB00) MBR(REFTAB00) PARM(&BIN): Agrega el BIN al archivo REFTAB00.
IF COND(&TRANSACCION *NE 'ALIANZA VISA') THEN(DO): Comprueba si el nombre de la transacción no es igual a 'ALIANZA VISA'.
IF COND(&VALOR *GT 2000) THEN(DO): Comprueba si el valor de la transacción es mayor a 2000.
IF COND(*NOT FOUND CEF0801L &TRANSACCION) THEN(DO): Comprueba si el registro de transacción no se encuentra en el archivo CEF0801L.
CHGVAR VAR(&REGISTRO) VALUE(%SST(&REGISTRO 1 15) || 'A' || %SUBST(&REGISTRO 17)): Modifica el campo DNADA3 del registro actual, agregando 'A' en la posición 16.
CHGVAR VAR(&MODIFICADO) VALUE('1'): Establece la variable &MODIFICADO en '1' para indicar que el registro ha sido modificado.
ADDPFM FILE(CEF0801L_C) MBR(CEF0801L_C) PARM(&REGISTRO): Agrega el registro modificado al archivo nuevo CEF0801L_C.
GOTO READ: Vuelve a leer el siguiente registro del archivo ELECTRON/CEF0500A.
EOF: CLOF FILE(ELECTRON/CEF0500A) CLOF FILE(CEF0801L_C): Cierra los archivos ELECTRON/CEF0500A y CEF0801L_C al finalizar el proceso.
Lógica general:
El código comienza creando un nuevo archivo llamado CEF0801L_C para guardar los registros modificados. Luego, se abren los archivos necesarios y se inicia un bucle de lectura de registros del archivo ELECTRON/CEF0500A. Para cada registro leído, se verifican las condiciones establecidas y, si se cumplen, se realiza la modificación necesaria en el campo DNADA3 del registro y se marca el registro como modificado. Finalmente, los registros modificados se guardan en el archivo CEF0801L_C. Este proceso se repite hasta que no haya más registros en el archivo ELECTRON/CEF0500A.
